// frontend/src/contexts/AuthContext.jsx - VERSION SANS REDIRECTION AUTO
import React, { createContext, useContext, useReducer, useEffect } from "react";
import { authAPI } from "../services/api";

const AuthContext = createContext();

const authReducer = (state, action) => {
  switch (action.type) {
    case "SET_LOADING":
      return { ...state, loading: action.payload };

    case "LOGIN_SUCCESS":
      return {
        ...state,
        user: action.payload.user,
        token: null,
        loading: false,
        error: null,
      };

    case "LOGIN_ERROR":
      return { ...state, error: action.payload, loading: false };

    case "LOGOUT":
      return { user: null, token: null, loading: false, error: null };

    case "UPDATE_USER":
      return { ...state, user: { ...state.user, ...action.payload } };

    case "REFRESH_USER_COMPLETE":
      return { ...state, user: action.payload, loading: false };

    case "CLEAR_ERROR":
      return { ...state, error: null };

    case "UPDATE_FAVORIS_PARFUMS":
      if (!state.user) return state;
      return {
        ...state,
        user: {
          ...state.user,
          favorisParfums: action.payload,
        },
      };

    case "UPDATE_FAVORIS_NOTES":
      if (!state.user) return state;
      return {
        ...state,
        user: {
          ...state.user,
          favorisNotes: action.payload,
        },
      };

    default:
      return state;
  }
};

export function AuthProvider({ children }) {
  const [state, dispatch] = useReducer(authReducer, {
    user: null,
    token: null,
    loading: true, // Commence en loading
    error: null,
  });

  // ‚úÖ INITIALISATION SANS REDIRECTION AUTOMATIQUE
  useEffect(() => {
    let isMounted = true;

    const initAuth = async () => {
      try {
        console.log("üîÑ V√©rification de l'authentification via cookie...");

        // ‚è±Ô∏è Timeout plus court pour √©viter les blocages
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 5000)
        );

        const authPromise = authAPI.checkAuth();
        const response = await Promise.race([authPromise, timeoutPromise]);

        if (!isMounted) return;

        console.log(
          "‚úÖ Utilisateur connect√© via cookie:",
          response.data.user.username
        );
        dispatch({
          type: "LOGIN_SUCCESS",
          payload: { user: response.data.user },
        });
      } catch (error) {
        if (!isMounted) return;

        // üîá Logging silencieux pour les erreurs normales
        if (error.response?.status === 401) {
          console.log("‚ÑπÔ∏è Utilisateur non connect√© (normal)");
        } else if (error.message === "Timeout") {
          console.log("‚è±Ô∏è Timeout de v√©rification auth (normal sur mobile)");
        } else {
          console.error("‚ùå Erreur initAuth:", error.message);
        }

        // ‚úÖ IMPORTANT : Toujours d√©finir loading √† false
        dispatch({ type: "SET_LOADING", payload: false });
      }
    };

    // üöÄ Lancer l'initialisation
    initAuth();

    return () => {
      isMounted = false;
    };
  }, []);

  // ‚úÖ FONCTION LOGIN (inchang√©e)
  const login = async (credentials) => {
    try {
      dispatch({ type: "SET_LOADING", payload: true });
      const response = await authAPI.login(credentials);
      console.log("‚úÖ Login r√©ussi:", response.data.user?.username);

      // V√©rifier si l'email est v√©rifi√©
      if (!response.data.user?.isVerified) {
        dispatch({ type: "SET_LOADING", payload: false });
        return {
          success: false,
          needsVerification: true,
          error: "Veuillez v√©rifier votre email avant de vous connecter.",
        };
      }

      dispatch({ type: "LOGIN_SUCCESS", payload: response.data });
      return { success: true };
    } catch (error) {
      const message = error.response?.data?.message || "Erreur de connexion";
      console.error("‚ùå Erreur login:", message);
      dispatch({ type: "LOGIN_ERROR", payload: message });

      // Cas sp√©cial : email non v√©rifi√©
      if (error.response?.data?.needsVerification) {
        return { success: false, needsVerification: true, error: message };
      }

      return { success: false, error: message };
    }
  };

  // ‚úÖ FONCTION REGISTER (inchang√©e)
  const register = async (userData) => {
    try {
      dispatch({ type: "SET_LOADING", payload: true });
      const response = await authAPI.register(userData);
      console.log("‚úÖ Registration r√©ussie:", response.data.user?.username);

      // Si needsVerification est true, ne pas connecter automatiquement
      if (response.data.user && !response.data.user.isVerified) {
        dispatch({ type: "SET_LOADING", payload: false });
        return {
          success: true,
          needsVerification: true,
          message:
            response.data.message || "Compte cr√©√© ! V√©rifiez votre email.",
        };
      }

      dispatch({ type: "LOGIN_SUCCESS", payload: response.data });
      return { success: true };
    } catch (error) {
      const message = error.response?.data?.message || "Erreur d'inscription";
      console.error("‚ùå Erreur register:", message);
      dispatch({ type: "LOGIN_ERROR", payload: message });
      return { success: false, error: message };
    }
  };

  // ‚úÖ FONCTION LOGOUT - AUCUNE REDIRECTION AUTOMATIQUE
  const logout = async () => {
    try {
      await authAPI.logout();
      console.log("‚úÖ D√©connexion r√©ussie (cookie supprim√©)");
    } catch (error) {
      console.error("‚ùå Erreur lors du logout:", error);
      // Continuer m√™me si l'appel API √©choue
    }

    // üîÑ Mettre √† jour l'√©tat local
    dispatch({ type: "LOGOUT" });

    // ‚úÖ RETOURNER STATUT POUR LE COMPOSANT
    return { success: true };
  };

  // ‚úÖ FONCTION UPDATE USER (inchang√©e)
  const updateUser = (userData) => {
    console.log("üîÑ Mise √† jour utilisateur:", userData.username);
    dispatch({ type: "UPDATE_USER", payload: userData });
  };

  // ‚úÖ FONCTION REFRESH USER SANS REDIRECTION AUTO
  const refreshUser = async () => {
    if (!state.user) return null;

    try {
      const response = await authAPI.getProfile();
      console.log("üîÑ Profil recharg√©:", response.data.user.username);
      dispatch({ type: "REFRESH_USER_COMPLETE", payload: response.data.user });
      return response.data.user;
    } catch (error) {
      console.error("‚ùå Erreur refresh user:", error);

      // ‚úÖ Si erreur 401, d√©connecter silencieusement (pas de redirection auto)
      if (error.response?.status === 401) {
        console.log("üö™ Token expir√© lors du refresh, d√©connexion silencieuse");
        dispatch({ type: "LOGOUT" });
      }
      return null;
    }
  };

  // ‚úÖ FONCTION CLEAR ERROR (inchang√©e)
  const clearError = () => {
    dispatch({ type: "CLEAR_ERROR" });
  };

  // ‚úÖ FONCTIONS PASSWORD (inchang√©es)
  const forgotPassword = async (email) => {
    try {
      dispatch({ type: "SET_LOADING", payload: true });
      const response = await authAPI.forgotPassword(email);

      console.log("‚úÖ Email de reset envoy√© √†:", email);
      return {
        success: true,
        message: response.data.message || "Email de r√©initialisation envoy√© !",
      };
    } catch (error) {
      console.error("‚ùå Erreur forgotPassword:", error);
      const message =
        error.response?.data?.message || "Erreur lors de l'envoi de l'email";
      dispatch({ type: "LOGIN_ERROR", payload: message });

      return { success: false, error: message };
    } finally {
      dispatch({ type: "SET_LOADING", payload: false });
    }
  };

  const resetPassword = async (token, password) => {
    try {
      dispatch({ type: "SET_LOADING", payload: true });
      const response = await authAPI.resetPassword(token, password);

      console.log("‚úÖ Mot de passe r√©initialis√© avec succ√®s");

      // ‚úÖ Si la r√©ponse contient un utilisateur, on le connecte automatiquement
      if (response.data.user) {
        dispatch({
          type: "LOGIN_SUCCESS",
          payload: { user: response.data.user },
        });
      }

      return {
        success: true,
        message:
          response.data.message || "Mot de passe r√©initialis√© avec succ√®s !",
        autoLogin: !!response.data.user,
      };
    } catch (error) {
      console.error("‚ùå Erreur resetPassword:", error);
      const message =
        error.response?.data?.message || "Erreur lors de la r√©initialisation";
      dispatch({ type: "LOGIN_ERROR", payload: message });

      return { success: false, error: message };
    } finally {
      dispatch({ type: "SET_LOADING", payload: false });
    }
  };

  const resendVerificationEmail = async (email) => {
    try {
      dispatch({ type: "SET_LOADING", payload: true });
      const response = await authAPI.resendVerification(email);

      console.log("‚úÖ Email de v√©rification renvoy√© √†:", email);
      return {
        success: true,
        message: response.data.message || "Email de v√©rification renvoy√© !",
      };
    } catch (error) {
      console.error("‚ùå Erreur resendVerification:", error);
      const message =
        error.response?.data?.message || "Erreur lors du renvoi de l'email";
      dispatch({ type: "LOGIN_ERROR", payload: message });

      return { success: false, error: message };
    } finally {
      dispatch({ type: "SET_LOADING", payload: false });
    }
  };

  // ‚úÖ VALEURS EXPOS√âES
  const value = {
    // √âtat
    user: state.user,
    token: state.token,
    loading: state.loading,
    error: state.error,
    isAuthenticated: !!state.user,
    isAdmin: state.user?.isAdmin || false,
    needsVerification: state.error?.includes("v√©rifier"),

    // Actions principales
    login,
    register,
    logout,
    updateUser,
    refreshUser,
    clearError,

    // Actions password
    forgotPassword,
    resetPassword,
    resendVerificationEmail,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

export default AuthContext;
